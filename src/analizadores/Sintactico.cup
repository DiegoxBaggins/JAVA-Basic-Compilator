package analizadores; 
import java_cup.runtime.*;
import compi1.lenguaje.olc.*;
import Objetos.*;
import java.util.ArrayList;

parser code 
{:
    //Codigo que se le agrega al parser

    public String Consola = "";

    public ArrayList<Expresion> expresiones = new ArrayList<Expresion>();
    public int contador;
    public int hoja = 1;

    //Codigo para Errores Sintacticos
    public void syntax_error(Symbol s){ 
        System.out.println("Error SintÃ¡ctico en la LÃ­nea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        Errors nuevoError = new Errors("Tipo Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Compi1LenguajeOLC.Errores.add(nuevoError); 
    } 

    //Codigo para errores que ya no se pueden recuperar
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sÃ­ntactico irrecuperable en la LÃ­nea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Errors nuevoError = new Errors("Tipo Sintactico (No Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Compi1LenguajeOLC.Errores.add(nuevoError);
    }  
:} 

terminal String llave1,llave2,dospuntos,puntocoma,punto,coma,asterisco,barra,comillas,comilla,mas,interrogacion,conj,guion,mayorq,separador,invertida;
terminal String palabra,id,casonum,casomin,casomayus,cadena,casosim;

non terminal INICIO;
non terminal CABEZA, CONJUNTO, CUERPO, ELEMENTOS, CUERPOCONJUNTOS, SEPARAR, ELEMENTOCUERPO;
non terminal Nodo EXPRESION;
non terminal Expresion CONJUNTOEXP;

start with INICIO; 

INICIO  ::=  llave1 CABEZA SEPARAR CUERPO llave2  {:Consola += "aceptada";:}
;

CABEZA  ::=   CABEZA CONJUNTO     {::}
 |   CABEZA CONJUNTOEXP:var1      {:expresiones.add(var1);hoja = 1; contador = 0;:}
 | CONJUNTO                       {::}
 | CONJUNTOEXP:var1               {:expresiones.add(var1);hoja = 1; contador = 0;:}
 | error puntocoma
;

CONJUNTO  ::=  conj dospuntos id guion mayorq CUERPOCONJUNTOS puntocoma    {::}
;

CUERPOCONJUNTOS::= palabra ELEMENTOS 
 |casomin
 |casomayus
 |casonum
 |casosim
;

ELEMENTOS  ::= ELEMENTOS palabra     {::}
 | ELEMENTOS coma {::}
 | palabra      {::}
 | coma     {::}
 | error puntocoma
;

CONJUNTOEXP  ::=  id:var1 guion mayorq EXPRESION:var2 puntocoma    {:RESULT=new Expresion(var2, var1, contador, hoja);:}
;

EXPRESION  ::=  punto EXPRESION:var1 EXPRESION:var2      {:RESULT=new Nodo(var1, var2, ".", parser.contador, 0); parser.contador++;:}
 | barra EXPRESION:var1 EXPRESION:var2                   {:RESULT=new Nodo(var1, var2, "|", parser.contador, 0); parser.contador++;:}
 | asterisco EXPRESION:var1                              {:RESULT=new Nodo(var1, null, "*", parser.contador, 0); parser.contador++;:}
 | mas EXPRESION:var1                                    {:RESULT=new Nodo(var1, null, "+", parser.contador, 0); parser.contador++;:}
 | interrogacion EXPRESION:var1                          {:RESULT=new Nodo(var1, null, "?", parser.contador, 0); parser.contador++;:}
 | cadena:var1                                           {:RESULT=new Nodo(null, null, var1.substring(1,var1.length()-1), parser.contador,parser.hoja); parser.contador++; parser.hoja++;:}
 | invertida comilla:var1                                {:RESULT=new Nodo(null, null, var1, parser.contador, parser.hoja); parser.contador++; parser.hoja++;:}
 | invertida:var1 comillas:var2                          {:RESULT=new Nodo(null, null, var1+var2, parser.contador, parser.hoja); parser.contador++; parser.hoja++;:}
 | invertida:var1 palabra:var2                           {:RESULT=new Nodo(null, null, var1+var1+var2, parser.contador, parser.hoja); parser.contador++; parser.hoja++;:}
 | llave1 id:var1 llave2                                 {:RESULT=new Nodo(null, null, var1, parser.contador, parser.hoja); parser.contador++; parser.hoja++;:}
 | error
; 

SEPARAR ::= separador separador separador separador {:System.out.println("fin cabeza");:}
;

CUERPO  ::= CUERPO ELEMENTOCUERPO {:System.out.println("Expresiones aceptada");:}
 |  ELEMENTOCUERPO  {:System.out.println("Expresiones aceptada");:}
 | error puntocoma
;

ELEMENTOCUERPO  ::=  id dospuntos cadena puntocoma     {::}
;

